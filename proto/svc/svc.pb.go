// Code generated by protoc-gen-go. DO NOT EDIT.
// source: svc.proto

package svc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SvcInfo struct {
	Id                   int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SvcNamespace         string     `protobuf:"bytes,2,opt,name=svc_namespace,json=svcNamespace,proto3" json:"svc_namespace,omitempty"`
	SvcName              string     `protobuf:"bytes,3,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`
	SvcPodName           string     `protobuf:"bytes,4,opt,name=svc_pod_name,json=svcPodName,proto3" json:"svc_pod_name,omitempty"`
	SvcType              string     `protobuf:"bytes,5,opt,name=svc_type,json=svcType,proto3" json:"svc_type,omitempty"`
	SvcExternalName      string     `protobuf:"bytes,6,opt,name=svc_external_name,json=svcExternalName,proto3" json:"svc_external_name,omitempty"`
	SvcTeamId            string     `protobuf:"bytes,7,opt,name=svc_team_id,json=svcTeamId,proto3" json:"svc_team_id,omitempty"`
	SvcPort              []*SvcPort `protobuf:"bytes,8,rep,name=svc_port,json=svcPort,proto3" json:"svc_port,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *SvcInfo) Reset()         { *m = SvcInfo{} }
func (m *SvcInfo) String() string { return proto.CompactTextString(m) }
func (*SvcInfo) ProtoMessage()    {}
func (*SvcInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{0}
}

func (m *SvcInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SvcInfo.Unmarshal(m, b)
}
func (m *SvcInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SvcInfo.Marshal(b, m, deterministic)
}
func (m *SvcInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcInfo.Merge(m, src)
}
func (m *SvcInfo) XXX_Size() int {
	return xxx_messageInfo_SvcInfo.Size(m)
}
func (m *SvcInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SvcInfo proto.InternalMessageInfo

func (m *SvcInfo) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SvcInfo) GetSvcNamespace() string {
	if m != nil {
		return m.SvcNamespace
	}
	return ""
}

func (m *SvcInfo) GetSvcName() string {
	if m != nil {
		return m.SvcName
	}
	return ""
}

func (m *SvcInfo) GetSvcPodName() string {
	if m != nil {
		return m.SvcPodName
	}
	return ""
}

func (m *SvcInfo) GetSvcType() string {
	if m != nil {
		return m.SvcType
	}
	return ""
}

func (m *SvcInfo) GetSvcExternalName() string {
	if m != nil {
		return m.SvcExternalName
	}
	return ""
}

func (m *SvcInfo) GetSvcTeamId() string {
	if m != nil {
		return m.SvcTeamId
	}
	return ""
}

func (m *SvcInfo) GetSvcPort() []*SvcPort {
	if m != nil {
		return m.SvcPort
	}
	return nil
}

type SvcPort struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SvcId                int64    `protobuf:"varint,2,opt,name=svc_id,json=svcId,proto3" json:"svc_id,omitempty"`
	SvcPort              int32    `protobuf:"varint,3,opt,name=svc_port,json=svcPort,proto3" json:"svc_port,omitempty"`
	SvcTargetPort        int32    `protobuf:"varint,4,opt,name=svc_target_port,json=svcTargetPort,proto3" json:"svc_target_port,omitempty"`
	SvcNodePort          int32    `protobuf:"varint,5,opt,name=svc_node_port,json=svcNodePort,proto3" json:"svc_node_port,omitempty"`
	SvcPortProtocol      string   `protobuf:"bytes,6,opt,name=svc_port_protocol,json=svcPortProtocol,proto3" json:"svc_port_protocol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcPort) Reset()         { *m = SvcPort{} }
func (m *SvcPort) String() string { return proto.CompactTextString(m) }
func (*SvcPort) ProtoMessage()    {}
func (*SvcPort) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{1}
}

func (m *SvcPort) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SvcPort.Unmarshal(m, b)
}
func (m *SvcPort) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SvcPort.Marshal(b, m, deterministic)
}
func (m *SvcPort) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcPort.Merge(m, src)
}
func (m *SvcPort) XXX_Size() int {
	return xxx_messageInfo_SvcPort.Size(m)
}
func (m *SvcPort) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcPort.DiscardUnknown(m)
}

var xxx_messageInfo_SvcPort proto.InternalMessageInfo

func (m *SvcPort) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SvcPort) GetSvcId() int64 {
	if m != nil {
		return m.SvcId
	}
	return 0
}

func (m *SvcPort) GetSvcPort() int32 {
	if m != nil {
		return m.SvcPort
	}
	return 0
}

func (m *SvcPort) GetSvcTargetPort() int32 {
	if m != nil {
		return m.SvcTargetPort
	}
	return 0
}

func (m *SvcPort) GetSvcNodePort() int32 {
	if m != nil {
		return m.SvcNodePort
	}
	return 0
}

func (m *SvcPort) GetSvcPortProtocol() string {
	if m != nil {
		return m.SvcPortProtocol
	}
	return ""
}

type SvcId struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SvcId) Reset()         { *m = SvcId{} }
func (m *SvcId) String() string { return proto.CompactTextString(m) }
func (*SvcId) ProtoMessage()    {}
func (*SvcId) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{2}
}

func (m *SvcId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SvcId.Unmarshal(m, b)
}
func (m *SvcId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SvcId.Marshal(b, m, deterministic)
}
func (m *SvcId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SvcId.Merge(m, src)
}
func (m *SvcId) XXX_Size() int {
	return xxx_messageInfo_SvcId.Size(m)
}
func (m *SvcId) XXX_DiscardUnknown() {
	xxx_messageInfo_SvcId.DiscardUnknown(m)
}

var xxx_messageInfo_SvcId proto.InternalMessageInfo

func (m *SvcId) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type FindAll struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAll) Reset()         { *m = FindAll{} }
func (m *FindAll) String() string { return proto.CompactTextString(m) }
func (*FindAll) ProtoMessage()    {}
func (*FindAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{3}
}

func (m *FindAll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAll.Unmarshal(m, b)
}
func (m *FindAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAll.Marshal(b, m, deterministic)
}
func (m *FindAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAll.Merge(m, src)
}
func (m *FindAll) XXX_Size() int {
	return xxx_messageInfo_FindAll.Size(m)
}
func (m *FindAll) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAll.DiscardUnknown(m)
}

var xxx_messageInfo_FindAll proto.InternalMessageInfo

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{4}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type AllSvc struct {
	SvcInfo              []*SvcInfo `protobuf:"bytes,1,rep,name=svc_info,json=svcInfo,proto3" json:"svc_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *AllSvc) Reset()         { *m = AllSvc{} }
func (m *AllSvc) String() string { return proto.CompactTextString(m) }
func (*AllSvc) ProtoMessage()    {}
func (*AllSvc) Descriptor() ([]byte, []int) {
	return fileDescriptor_e5747b2e02f0c537, []int{5}
}

func (m *AllSvc) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllSvc.Unmarshal(m, b)
}
func (m *AllSvc) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllSvc.Marshal(b, m, deterministic)
}
func (m *AllSvc) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllSvc.Merge(m, src)
}
func (m *AllSvc) XXX_Size() int {
	return xxx_messageInfo_AllSvc.Size(m)
}
func (m *AllSvc) XXX_DiscardUnknown() {
	xxx_messageInfo_AllSvc.DiscardUnknown(m)
}

var xxx_messageInfo_AllSvc proto.InternalMessageInfo

func (m *AllSvc) GetSvcInfo() []*SvcInfo {
	if m != nil {
		return m.SvcInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*SvcInfo)(nil), "svc.SvcInfo")
	proto.RegisterType((*SvcPort)(nil), "svc.SvcPort")
	proto.RegisterType((*SvcId)(nil), "svc.SvcId")
	proto.RegisterType((*FindAll)(nil), "svc.FindAll")
	proto.RegisterType((*Response)(nil), "svc.Response")
	proto.RegisterType((*AllSvc)(nil), "svc.AllSvc")
}

func init() {
	proto.RegisterFile("svc.proto", fileDescriptor_e5747b2e02f0c537)
}

var fileDescriptor_e5747b2e02f0c537 = []byte{
	// 462 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x86, 0xeb, 0xb8, 0x76, 0xe2, 0x49, 0x4b, 0xe8, 0x4a, 0x08, 0x53, 0x21, 0x14, 0x2d, 0x12,
	0x84, 0x1e, 0x52, 0x51, 0x8e, 0x9c, 0x52, 0x15, 0xa4, 0x5c, 0xaa, 0xca, 0x0e, 0x17, 0x2e, 0x91,
	0xd9, 0x9d, 0x56, 0x96, 0x1c, 0xaf, 0xe5, 0xb5, 0x56, 0xe4, 0x19, 0x78, 0x2c, 0xde, 0x82, 0xa7,
	0x41, 0x33, 0xb6, 0x03, 0xa6, 0x07, 0x6e, 0xb3, 0x33, 0xdf, 0xfc, 0xbb, 0xff, 0x6f, 0x43, 0x64,
	0x9d, 0x5a, 0x56, 0xb5, 0x69, 0x8c, 0xf0, 0xad, 0x53, 0xf2, 0xc7, 0x08, 0xc6, 0xa9, 0x53, 0xeb,
	0xf2, 0xde, 0x88, 0x27, 0x30, 0xca, 0x75, 0xec, 0xcd, 0xbd, 0x85, 0x9f, 0x8c, 0x72, 0x2d, 0x5e,
	0xc3, 0xa9, 0x75, 0x6a, 0x5b, 0x66, 0x3b, 0xb4, 0x55, 0xa6, 0x30, 0x1e, 0xcd, 0xbd, 0x45, 0x94,
	0x9c, 0x58, 0xa7, 0x6e, 0xfb, 0x9e, 0x78, 0x01, 0x93, 0x1e, 0x8a, 0x7d, 0x9e, 0x8f, 0xbb, 0xb9,
	0x98, 0x03, 0xa1, 0xdb, 0xca, 0xe8, 0x76, 0x7c, 0xcc, 0x63, 0xb0, 0x4e, 0xdd, 0x19, 0xcd, 0x44,
	0xb7, 0xdc, 0xec, 0x2b, 0x8c, 0x83, 0xc3, 0xf2, 0x66, 0x5f, 0xa1, 0xb8, 0x80, 0x33, 0x1a, 0xe1,
	0xf7, 0x06, 0xeb, 0x32, 0x2b, 0x5a, 0x85, 0x90, 0x99, 0x99, 0x75, 0xea, 0x53, 0xd7, 0x67, 0x99,
	0x57, 0x30, 0x65, 0x19, 0xcc, 0x76, 0xdb, 0x5c, 0xc7, 0x63, 0xa6, 0xc8, 0xe9, 0x06, 0xb3, 0xdd,
	0x5a, 0x8b, 0xb7, 0xed, 0x35, 0x95, 0xa9, 0x9b, 0x78, 0x32, 0xf7, 0x17, 0xd3, 0xab, 0x93, 0x25,
	0xe5, 0x90, 0xd2, 0x4b, 0xea, 0x86, 0x2f, 0xa5, 0x42, 0xfe, 0xf4, 0x38, 0x0d, 0xaa, 0x1f, 0xa5,
	0xf1, 0x0c, 0x42, 0x12, 0xc9, 0x35, 0xc7, 0xe0, 0x27, 0x81, 0x75, 0x6a, 0xad, 0x7b, 0x0b, 0xac,
	0x4d, 0xfe, 0x83, 0x83, 0x9a, 0x78, 0x03, 0x33, 0x7e, 0x56, 0x56, 0x3f, 0x60, 0xd3, 0x12, 0xc7,
	0x4c, 0x50, 0xac, 0x1b, 0xee, 0x32, 0x27, 0xbb, 0x9c, 0x8d, 0xc6, 0x96, 0x0a, 0x98, 0x22, 0x4f,
	0xb7, 0x46, 0x23, 0x33, 0x5d, 0x1c, 0x34, 0xde, 0xf2, 0xe7, 0x53, 0xa6, 0xf8, 0x2b, 0x0e, 0x62,
	0xee, 0xba, 0xb6, 0x7c, 0x0e, 0x41, 0xca, 0x6f, 0xfb, 0xc7, 0x82, 0x8c, 0x60, 0xfc, 0x39, 0x2f,
	0xf5, 0xaa, 0x28, 0xe4, 0x4b, 0x98, 0x24, 0x68, 0x2b, 0x53, 0x5a, 0x14, 0x4f, 0xc1, 0xdf, 0xd9,
	0x07, 0xe6, 0xa2, 0x84, 0x4a, 0xf9, 0x1e, 0xc2, 0x55, 0x51, 0xa4, 0x4e, 0xf5, 0xd1, 0xe5, 0xe5,
	0xbd, 0x89, 0xbd, 0x61, 0x74, 0xf4, 0xcf, 0xb0, 0x59, 0x2a, 0xae, 0x7e, 0x79, 0xe0, 0xb7, 0x0b,
	0xe1, 0x4a, 0x6b, 0xaa, 0x06, 0xe0, 0xf9, 0x29, 0x9f, 0xfa, 0x3b, 0xe5, 0x91, 0x58, 0x40, 0x74,
	0x83, 0x05, 0x36, 0x48, 0x2c, 0x1c, 0x58, 0xfd, 0x98, 0xbc, 0x80, 0xe8, 0x4b, 0xa5, 0xb3, 0x96,
	0xfc, 0x8f, 0xea, 0x3b, 0x98, 0x92, 0xc5, 0xd4, 0xa9, 0xeb, 0xfd, 0xfa, 0x66, 0xa0, 0x3b, 0xd8,
	0x64, 0x14, 0xba, 0x34, 0xfe, 0xe8, 0x76, 0x8d, 0xf3, 0x29, 0x9f, 0xda, 0x91, 0x3c, 0xba, 0x3e,
	0xfb, 0x3a, 0x5b, 0x5e, 0x72, 0xec, 0x97, 0xd6, 0xa9, 0x8f, 0xd6, 0xa9, 0x6f, 0x21, 0x1f, 0x3f,
	0xfc, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xce, 0x74, 0x84, 0x49, 0x51, 0x03, 0x00, 0x00,
}
